import os
import time
import pandas as pd
from datetime import datetime, timedelta
from threading import Thread
from flask import Flask, jsonify, request
from flask_cors import CORS
from pytrends.request import TrendReq

app = Flask(__name__)
CORS(app)

cached_trends = []
last_update = None
update_interval = 30 * 24 * 60 * 60  # 30 ‡∏ß‡∏±‡∏ô

BUSINESS_KEYWORDS = [
    '‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à', '‡∏•‡∏á‡∏ó‡∏∏‡∏ô', '‡∏Ç‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå', '‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤', '‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå',
    '‡πÅ‡∏ü‡∏£‡∏ô‡πÑ‡∏ä‡∏™‡πå', '‡∏™‡∏ï‡∏≤‡∏£‡πå‡∏ó‡∏≠‡∏±‡∏û', '‡∏Ç‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á', '‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£', '‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£',
    '‡∏Ñ‡∏≤‡πÄ‡∏ü‡πà', '‡πÄ‡∏ö‡πÄ‡∏Å‡∏≠‡∏£‡∏µ‡πà', '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏á‡∏≤‡∏°', '‡πÅ‡∏ü‡∏ä‡∏±‡πà‡∏ô', '‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå'
]

BUSINESS_FILTER_KEYWORDS_SET = set(k.lower() for k in [
    '‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à', '‡∏£‡πâ‡∏≤‡∏ô', '‡∏Ç‡∏≤‡∏¢', '‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£', '‡∏Ñ‡∏≤‡πÄ‡∏ü‡πà', '‡∏Å‡∏≤‡πÅ‡∏ü', '‡∏≠‡∏≤‡∏´‡∏≤‡∏£',
    '‡πÄ‡∏ö‡πÄ‡∏Å‡∏≠‡∏£‡∏µ‡πà', '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏á‡∏≤‡∏°', '‡πÅ‡∏ü‡∏ä‡∏±‡πà‡∏ô', '‡∏Ñ‡∏≠‡∏£‡πå‡∏™', '‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå', '‡πÅ‡∏ü‡∏£‡∏ô‡πÑ‡∏ä‡∏™‡πå',
    '‡∏•‡∏á‡∏ó‡∏∏‡∏ô', '‡πÄ‡∏õ‡∏¥‡∏î', '‡∏ó‡∏≥', '‡∏™‡∏£‡πâ‡∏≤‡∏á', '‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô', '‡∏Ç‡∏¢‡∏≤‡∏¢', '‡∏û‡∏±‡∏í‡∏ô‡∏≤',
    '‡∏ï‡∏•‡∏≤‡∏î', '‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤', '‡∏ú‡∏•‡∏¥‡∏ï', '‡∏à‡∏≥‡∏´‡∏ô‡πà‡∏≤‡∏¢', '‡∏Å‡∏¥‡∏à‡∏Å‡∏≤‡∏£', '‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ'
])

EXCLUDED_KEYWORDS_SET = set(k.lower() for k in [
    '‡∏Ç‡πà‡∏≤‡∏ß', '‡∏Å‡∏≤‡∏£‡πÄ‡∏°‡∏∑‡∏≠‡∏á', '‡∏Å‡∏µ‡∏¨‡∏≤', '‡∏î‡∏≤‡∏£‡∏≤', '‡∏ã‡∏µ‡∏£‡∏µ‡πà‡∏¢‡πå', '‡∏´‡∏ô‡∏±‡∏á',
    '‡πÄ‡∏Å‡∏°', '‡∏≠‡∏ô‡∏¥‡πÄ‡∏°‡∏∞', '‡∏°‡∏¥‡∏ß‡∏™‡∏¥‡∏Ñ', '‡∏ó‡πà‡∏≠‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß', '‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û',
    '‡πÇ‡∏£‡∏Ñ‡∏£‡∏∞‡∏ö‡∏≤‡∏î', '‡∏™‡∏á‡∏Ñ‡∏£‡∏≤‡∏°', '‡∏≠‡∏∏‡∏ö‡∏±‡∏ï‡∏¥‡πÄ‡∏´‡∏ï‡∏∏'
])


def is_business_related(query):
    query_lower = query.lower()
    if any(excluded in query_lower for excluded in EXCLUDED_KEYWORDS_SET):
        return False
    return any(keyword in query_lower for keyword in BUSINESS_FILTER_KEYWORDS_SET)


def clean_and_filter_trends(trends_data):
    cleaned_trends = {
        trend.strip().title()
        for trend in trends_data
        if is_business_related(trend.strip()) and len(trend.strip()) > 3
    }
    return list(cleaned_trends)


def fetch_trending_data():
    try:
        print("üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ó‡∏£‡∏ô‡∏î‡πå‡πÉ‡∏´‡∏°‡πà...")
        pytrends = TrendReq(hl='th-TH', tz=360)
        all_trends = set()

        for i in range(0, len(BUSINESS_KEYWORDS), 3):
            batch = BUSINESS_KEYWORDS[i:i+3]
            time.sleep(2)
            try:
                pytrends.build_payload(batch, geo='TH', timeframe='now 7-d')
                related = pytrends.related_queries()

                for keyword in batch:
                    if keyword in related:
                        top_df = related[keyword].get("top")
                        rising_df = related[keyword].get("rising")

                        if isinstance(top_df, pd.DataFrame) and not top_df.empty and "query" in top_df.columns:
                            all_trends.update(top_df["query"].head(8).tolist())

                        if isinstance(rising_df, pd.DataFrame) and not rising_df.empty and "query" in rising_df.columns:
                            all_trends.update(rising_df["query"].head(5).tolist())

            except Exception as e:
                print(f"‚ö†Ô∏è Error batch {batch}: {e}")
                continue

        filtered_trends = clean_and_filter_trends(all_trends)
        print(f"‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ó‡∏£‡∏ô‡∏î‡πå‡πÑ‡∏î‡πâ {len(filtered_trends[:15])} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
        return filtered_trends[:15]
    except Exception as e:
        print(f"‚ùå Error fetching trends: {e}")
        return []





def update_trends_cache():
    global cached_trends, last_update
    new_trends = fetch_trending_data()
    if new_trends and len(new_trends) >= 5:
        cached_trends = new_trends[:10]
    else:
        cached_trends = get_fallback_trends()[:10]
    last_update = datetime.now()
    print(f"üìä ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ó‡∏£‡∏ô‡∏î‡πå‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß ({len(cached_trends)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£)")


def should_update_cache():
    if not cached_trends or last_update is None:
        return True
    elapsed = (datetime.now() - last_update).total_seconds()
    return elapsed > update_interval


def background_update():
    while True:
        try:
            if should_update_cache():
                update_trends_cache()
            time.sleep(3600)
        except Exception as e:
            print(f"‚ùå Error in background update: {e}")
            time.sleep(3600)


@app.route("/")
def home():
    return jsonify({
        "service": "Thai Business Trends API",
        "version": "2.0",
        "description": "API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à‡∏¢‡∏≠‡∏î‡∏ô‡∏¥‡∏¢‡∏°‡∏à‡∏≤‡∏Å Google Trends",
        "endpoints": {
            "/api/trends": "‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à‡∏¢‡∏≠‡∏î‡∏ô‡∏¥‡∏¢‡∏° 10 ‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡πÅ‡∏£‡∏Å",
            "/api/trends/fresh": "‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà",
            "/api/status": "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö"
        },
        "features": [
            "üîå Web API ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô",
            "üìä ‡∏î‡∏∂‡∏á‡πÄ‡∏ó‡∏£‡∏ô‡∏î‡πå‡∏à‡∏≤‡∏Å Google Trends",
            "üßπ ‡∏Ñ‡∏±‡∏î‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à",
            "üì§ ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• JSON",
            "üîÑ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏ó‡∏∏‡∏Å‡πÄ‡∏î‡∏∑‡∏≠‡∏ô"
        ],
        "status": "running",
        "last_update": last_update.isoformat() if last_update else None,
        "cached_trends_count": len(cached_trends)
    })


@app.route("/api/trends")
def get_trends():
    try:
        if should_update_cache():
            update_trends_cache()
        last = last_update.isoformat() if isinstance(last_update, datetime) else None
        next_update = (
            (last_update + timedelta(seconds=update_interval)).isoformat()
            if isinstance(last_update, datetime)
            else None
        )
        return jsonify({
            "trends": cached_trends,
            "last_update": last,
            "next_update": next_update,
            "total_count": len(cached_trends)
        })
    except Exception as e:
        return jsonify({
            "error": str(e),
            "fallback_trends": get_fallback_trends()[:10]
        }), 500


@app.route("/api/trends/fresh")
def get_fresh_trends():
    try:
        update_trends_cache()
        return jsonify({
            "message": "‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ó‡∏£‡∏ô‡∏î‡πå‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢",
            "trends": cached_trends,
            "updated_at": last_update.isoformat() if isinstance(last_update, datetime) else None,
            "total_count": len(cached_trends)
        })
    except Exception as e:
        return jsonify({
            "error": str(e),
            "message": "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ"
        }), 500


@app.route("/api/status")
def get_status():
    uptime_seconds = (datetime.now() - last_update).total_seconds() if last_update else 0
    return jsonify({
        "status": "healthy",
        "uptime_seconds": uptime_seconds,
        "last_update": last_update.isoformat() if last_update else None,
        "cached_trends_count": len(cached_trends),
        "update_interval_days": update_interval / (24 * 60 * 60),
        "next_update_in_seconds": max(0, update_interval - uptime_seconds) if last_update else 0,
        "background_thread_alive": background_thread.is_alive()
    })


@app.errorhandler(404)
def not_found(error):
    return jsonify({
        "error": "Endpoint not found",
        "available_endpoints": [
            "/",
            "/api/trends",
            "/api/trends/fresh",
            "/api/status"
        ]
    }), 404


@app.errorhandler(500)
def internal_error(error):
    return jsonify({
        "error": "Internal server error",
        "message": "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á"
    }), 500


def test_pytrends_connection():
    print("üöÄ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö pytrends...")
    try:
        pytrends = TrendReq(hl='th-TH', tz=360)
        pytrends.build_payload(kw_list=["‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à"], geo="TH", timeframe="now 7-d")
        related = pytrends.related_queries()
        if related and "‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à" in related:
            print("‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:")
            print("üî∏ top:", related["‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à"].get("top"))
            print("üî∏ rising:", related["‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à"].get("rising"))
        else:
            print("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• related queries ‡πÄ‡∏•‡∏¢")
    except Exception as e:
        print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")


# ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏≠‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏£‡∏∞‡∏ö‡∏ö
test_pytrends_connection()

# ‡πÄ‡∏£‡∏¥‡πà‡∏° background thread
background_thread = Thread(target=background_update, daemon=True)
background_thread.start()

# ‡∏£‡∏±‡∏ô Flask app
if __name__ == "__main__":
    port = int(os.environ.get("PORT", 8080))
    print("‚úÖ API ready on http://0.0.0.0:" + str(port))
    app.run(host="0.0.0.0", port=port, debug=False, threaded=True)
