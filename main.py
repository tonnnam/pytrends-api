import os
import json
import time
from datetime import datetime, timedelta
from threading import Thread
from flask import Flask, jsonify, request
from flask_cors import CORS
from pytrends.request import TrendReq
import random

app = Flask(__name__)
CORS(app)

# Global variables ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞ cache
cached_trends = []
last_update = None
update_interval = 30 * 24 * 60 * 60  # 30 ‡∏ß‡∏±‡∏ô (‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)

# ‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡πÄ‡∏ó‡∏£‡∏ô‡∏î‡πå‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à
BUSINESS_KEYWORDS = [
    '‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à', '‡∏•‡∏á‡∏ó‡∏∏‡∏ô', '‡∏Ç‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå', '‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤', '‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå',
    '‡πÅ‡∏ü‡∏£‡∏ô‡πÑ‡∏ä‡∏™‡πå', '‡∏™‡∏ï‡∏≤‡∏£‡πå‡∏ó‡∏≠‡∏±‡∏û', '‡∏Ç‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á', '‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£', '‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£',
    '‡∏Ñ‡∏≤‡πÄ‡∏ü‡πà', '‡πÄ‡∏ö‡πÄ‡∏Å‡∏≠‡∏£‡∏µ‡πà', '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏á‡∏≤‡∏°', '‡πÅ‡∏ü‡∏ä‡∏±‡πà‡∏ô', '‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå'
]

# ‡∏Ñ‡∏≥‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à
BUSINESS_FILTER_KEYWORDS = [
    '‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à', '‡∏£‡πâ‡∏≤‡∏ô', '‡∏Ç‡∏≤‡∏¢', '‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£', '‡∏Ñ‡∏≤‡πÄ‡∏ü‡πà', '‡∏Å‡∏≤‡πÅ‡∏ü', '‡∏≠‡∏≤‡∏´‡∏≤‡∏£',
    '‡πÄ‡∏ö‡πÄ‡∏Å‡∏≠‡∏£‡∏µ‡πà', '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏á‡∏≤‡∏°', '‡πÅ‡∏ü‡∏ä‡∏±‡πà‡∏ô', '‡∏Ñ‡∏≠‡∏£‡πå‡∏™', '‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå', '‡πÅ‡∏ü‡∏£‡∏ô‡πÑ‡∏ä‡∏™‡πå',
    '‡∏•‡∏á‡∏ó‡∏∏‡∏ô', '‡πÄ‡∏õ‡∏¥‡∏î', '‡∏ó‡∏≥', '‡∏™‡∏£‡πâ‡∏≤‡∏á', '‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô', '‡∏Ç‡∏¢‡∏≤‡∏¢', '‡∏û‡∏±‡∏í‡∏ô‡∏≤',
    '‡∏ï‡∏•‡∏≤‡∏î', '‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤', '‡∏ú‡∏•‡∏¥‡∏ï', '‡∏à‡∏≥‡∏´‡∏ô‡πà‡∏≤‡∏¢', '‡∏Å‡∏¥‡∏à‡∏Å‡∏≤‡∏£', '‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ'
]

def is_business_related(query):
    """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà"""
    query_lower = query.lower()
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à
    for keyword in BUSINESS_FILTER_KEYWORDS:
        if keyword in query_lower:
            return True
    
    # ‡∏Å‡∏£‡∏≠‡∏á‡∏Ñ‡∏≥‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à
    excluded_keywords = [
        '‡∏Ç‡πà‡∏≤‡∏ß', '‡∏Å‡∏≤‡∏£‡πÄ‡∏°‡∏∑‡∏≠‡∏á', '‡∏Å‡∏µ‡∏¨‡∏≤', '‡∏î‡∏≤‡∏£‡∏≤', '‡∏ã‡∏µ‡∏£‡∏µ‡πà‡∏¢‡πå', '‡∏´‡∏ô‡∏±‡∏á',
        '‡πÄ‡∏Å‡∏°', '‡∏≠‡∏ô‡∏¥‡πÄ‡∏°‡∏∞', '‡∏°‡∏¥‡∏ß‡∏™‡∏¥‡∏Ñ', '‡∏ó‡πà‡∏≠‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß', '‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û',
        '‡πÇ‡∏£‡∏Ñ‡∏£‡∏∞‡∏ö‡∏≤‡∏î', '‡∏™‡∏á‡∏Ñ‡∏£‡∏≤‡∏°', '‡∏≠‡∏∏‡∏ö‡∏±‡∏ï‡∏¥‡πÄ‡∏´‡∏ï‡∏∏'
    ]
    
    for excluded in excluded_keywords:
        if excluded in query_lower:
            return False
    
    return True

def clean_and_filter_trends(trends_data):
    """‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡πÅ‡∏•‡∏∞‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ó‡∏£‡∏ô‡∏î‡πå"""
    cleaned_trends = set()
    
    for trend in trends_data:
        # ‡∏•‡∏ö‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡∏û‡∏¥‡∏°‡∏û‡πå‡πÉ‡∏´‡∏ç‡πà‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏ô‡∏Ñ‡∏≥
        clean_trend = trend.strip().title()
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if is_business_related(clean_trend) and len(clean_trend) > 3:
            cleaned_trends.add(clean_trend)
    
    return list(cleaned_trends)

def fetch_trending_data():
    """‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ó‡∏£‡∏ô‡∏î‡πå‡∏à‡∏≤‡∏Å Google Trends"""
    try:
        print("üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ó‡∏£‡∏ô‡∏î‡πå‡πÉ‡∏´‡∏°‡πà...")
        pytrends = TrendReq(hl='th-TH', tz=360)
        
        all_trends = set()
        
        # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏´‡∏•‡∏≤‡∏¢ ‡πÜ ‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
        for i in range(0, len(BUSINESS_KEYWORDS), 3):
            batch = BUSINESS_KEYWORDS[i:i+3]
            
            try:
                # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏´‡∏ô‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á rate limit
                time.sleep(2)
                
                pytrends.build_payload(batch, geo='TH', timeframe='now 7-d')
                related = pytrends.related_queries()
                
                for keyword in batch:
                    if keyword in related:
                        # ‡∏î‡∏∂‡∏á top queries
                        if related[keyword]['top'] is not None:
                            top_queries = related[keyword]['top']['query'].tolist()
                            all_trends.update(top_queries[:8])
                        
                        # ‡∏î‡∏∂‡∏á rising queries
                        if related[keyword]['rising'] is not None:
                            rising_queries = related[keyword]['rising']['query'].tolist()
                            all_trends.update(rising_queries[:5])
                            
            except Exception as e:
                print(f"‚ö†Ô∏è Error processing batch {batch}: {str(e)}")
                continue
        
        # ‡∏Å‡∏£‡∏≠‡∏á‡πÅ‡∏•‡∏∞‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        filtered_trends = clean_and_filter_trends(all_trends)
        
        # ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡πÅ‡∏•‡∏∞‡πÄ‡∏•‡∏∑‡∏≠‡∏Å 15 ‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡πÅ‡∏£‡∏Å (‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡πÑ‡∏ß‡πâ‡∏ö‡πâ‡∏≤‡∏á)
        top_trends = filtered_trends[:15]
        
        print(f"‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ó‡∏£‡∏ô‡∏î‡πå‡πÑ‡∏î‡πâ {len(top_trends)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
        return top_trends
        
    except Exception as e:
        print(f"‚ùå Error fetching trends: {str(e)}")
        return []

def get_fallback_trends():
    """‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏£‡∏≠‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏à‡∏≤‡∏Å API ‡πÑ‡∏î‡πâ"""
    return [
        "‡πÅ‡∏ü‡∏£‡∏ô‡πÑ‡∏ä‡∏™‡πå‡∏Å‡∏≤‡πÅ‡∏ü‡∏™‡∏î",
        "‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå",
        "‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à‡∏≠‡∏™‡∏±‡∏á‡∏´‡∏≤‡∏£‡∏¥‡∏°‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå",
        "‡πÄ‡∏õ‡∏¥‡∏î‡∏£‡πâ‡∏≤‡∏ô‡πÄ‡∏ö‡πÄ‡∏Å‡∏≠‡∏£‡∏µ‡πà",
        "‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û",
        "‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏™‡∏≥‡∏≠‡∏≤‡∏á‡πÄ‡∏Å‡∏≤‡∏´‡∏•‡∏µ",
        "‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏•‡∏¥‡πÄ‡∏ß‡∏≠‡∏£‡∏µ‡πà",
        "‡πÄ‡∏™‡∏∑‡πâ‡∏≠‡∏ú‡πâ‡∏≤‡πÅ‡∏ü‡∏ä‡∏±‡πà‡∏ô",
        "‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå",
        "‡∏Ç‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡πÉ‡∏ô TikTok",
        "‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à‡∏Ç‡∏ô‡∏°",
        "‡∏£‡πâ‡∏≤‡∏ô‡∏î‡∏≠‡∏Å‡πÑ‡∏°‡πâ",
        "‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î",
        "‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÄ‡∏™‡∏£‡∏¥‡∏°",
        "‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à‡∏ô‡πâ‡∏≥‡∏î‡∏∑‡πà‡∏°"
    ]

def update_trends_cache():
    """‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ó‡∏£‡∏ô‡∏î‡πå‡πÉ‡∏ô‡πÅ‡∏Ñ‡∏ä"""
    global cached_trends, last_update
    
    # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà
    new_trends = fetch_trending_data()
    
    if new_trends and len(new_trends) >= 5:
        cached_trends = new_trends[:10]  # ‡πÄ‡∏Å‡πá‡∏ö 10 ‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡πÅ‡∏£‡∏Å
    else:
        # ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏£‡∏≠‡∏á
        fallback = get_fallback_trends()
        cached_trends = fallback[:10]
    
    last_update = datetime.now()
    print(f"üìä ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ó‡∏£‡∏ô‡∏î‡πå‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß ({len(cached_trends)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£)")

def should_update_cache():
    """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ñ‡∏ß‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÅ‡∏Ñ‡∏ä‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà"""
    if not cached_trends or last_update is None:
        return True
    
    time_since_update = (datetime.now() - last_update).total_seconds()
    return time_since_update > update_interval

def background_update():
    """‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á"""
    while True:
        try:
            if should_update_cache():
                update_trends_cache()
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ó‡∏∏‡∏Å 1 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á
            time.sleep(3600)
            
        except Exception as e:
            print(f"‚ùå Error in background update: {str(e)}")
            time.sleep(3600)

# ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ó‡∏£‡∏ô‡∏î‡πå
update_trends_cache()

# ‡πÄ‡∏£‡∏¥‡πà‡∏° background thread ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
background_thread = Thread(target=background_update, daemon=True)
background_thread.start()

@app.route("/")
def home():
    """‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å - ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• API"""
    return jsonify({
        "service": "Thai Business Trends API",
        "version": "2.0",
        "description": "API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à‡∏¢‡∏≠‡∏î‡∏ô‡∏¥‡∏¢‡∏°‡∏à‡∏≤‡∏Å Google Trends",
        "endpoints": {
            "/api/trends": "‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à‡∏¢‡∏≠‡∏î‡∏ô‡∏¥‡∏¢‡∏° 10 ‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡πÅ‡∏£‡∏Å",
            "/api/trends/fresh": "‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà",
            "/api/status": "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö"
        },
        "features": [
            "üîå Web API ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô",
            "üìä ‡∏î‡∏∂‡∏á‡πÄ‡∏ó‡∏£‡∏ô‡∏î‡πå‡∏à‡∏≤‡∏Å Google Trends",
            "üßπ ‡∏Ñ‡∏±‡∏î‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à",
            "üì§ ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• JSON",
            "üîÑ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏ó‡∏∏‡∏Å‡πÄ‡∏î‡∏∑‡∏≠‡∏ô"
        ],
        "status": "running",
        "last_update": last_update.isoformat() if last_update else None,
        "cached_trends_count": len(cached_trends)
    })

@app.route("/api/trends")
def get_trends():
    try:
        if should_update_cache():
            update_trends_cache()

        # ‚úÖ ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô last_update ‡πÄ‡∏õ‡πá‡∏ô None
        last = last_update.isoformat() if isinstance(last_update, datetime) else None
        next_update = (
            (last_update + timedelta(seconds=update_interval)).isoformat()
            if isinstance(last_update, datetime)
            else None
        )

        return jsonify({
            "trends": cached_trends,
            "last_update": last,
            "next_update": next_update,
            "total_count": len(cached_trends)
        })

    except Exception as e:
        return jsonify({
            "error": str(e),
            "fallback_trends": get_fallback_trends()[:10]
        }), 500
        
@app.route("/api/trends/fresh")
def get_fresh_trends():
    """‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà"""
    try:
        update_trends_cache()
        
        return jsonify({
            "message": "‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ó‡∏£‡∏ô‡∏î‡πå‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢",
            "trends": cached_trends,
            "updated_at": last_update.isoformat() if isinstance(last_update, datetime) else None,
            "total_count": len(cached_trends)
        })
        
    except Exception as e:
        return jsonify({
            "error": str(e),
            "message": "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ"
        }), 500

@app.route("/api/status")
def get_status():
    """‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö"""
    uptime_seconds = (datetime.now() - last_update).total_seconds() if last_update else 0
    
    return jsonify({
        "status": "healthy",
        "uptime_seconds": uptime_seconds,
        "last_update": last_update.isoformat() if last_update else None,
        "cached_trends_count": len(cached_trends),
        "update_interval_days": update_interval / (24 * 60 * 60),
        "next_update_in_seconds": max(0, update_interval - uptime_seconds) if last_update else 0,
        "background_thread_alive": background_thread.is_alive()
    })

@app.errorhandler(404)
def not_found(error):
    return jsonify({
        "error": "Endpoint not found",
        "available_endpoints": [
            "/",
            "/api/trends",
            "/api/trends/fresh", 
            "/api/status"
        ]
    }), 404

@app.errorhandler(500)
def internal_error(error):
    return jsonify({
        "error": "Internal server error",
        "message": "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á"
    }), 500

# üîç ‡∏ó‡∏î‡∏™‡∏≠‡∏ö pytrends ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ‡πÑ‡∏´‡∏°
def test_pytrends_connection():
    from pytrends.request import TrendReq

    print("üöÄ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö pytrends...")

    try:
        pytrends = TrendReq(hl='th-TH', tz=360)
        pytrends.build_payload(kw_list=["‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à"], geo="TH", timeframe="now 7-d")
        related = pytrends.related_queries()

        if related and "‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à" in related:
            print("‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:")
            print("üî∏ top:", related["‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à"].get("top"))
            print("üî∏ rising:", related["‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à"].get("rising"))
        else:
            print("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• related queries ‡πÄ‡∏•‡∏¢ (‡∏≠‡∏≤‡∏à‡∏ñ‡∏π‡∏Å block ‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡πÑ‡∏°‡πà‡πÅ‡∏°‡πà‡∏ô)")
    except Exception as e:
        print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")

# ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏î‡∏™‡∏≠‡∏ö
test_pytrends_connection()

if __name__ == "__main__":
    print("üöÄ Starting Thai Business Trends API...")
    print("üìä Initial trends data loaded")
    print("üîÑ Background update thread started")
    print("‚úÖ API ready on http://0.0.0.0:8080")
    
    app.run(host="0.0.0.0", port=8080, debug=False, threaded=True)

# updated for Render deploy
